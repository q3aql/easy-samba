#!/bin/bash

##############################################################
# Crear carpetas compartidas en Linux                        #
# U. Modificacion: 28-03-2021                                #
# Autor: q3aql                                               #
# Contacto: q3aql@protonmail.ch                              #
# Licencia: GPL v2.0                                         #
##############################################################
VERSION="1.6.2"
M_DATE="280321"

# Parametros globales
linuxSambaFolder="/opt/easy-samba"
sambaConfig="/etc/samba/smb.conf"
sambaBackup="/etc/samba/smb.conf.orig"
homeUsers="/home"
homeUsersList="/tmp/easy-samba-users.list"
sambaFoldersList="/tmp/easy-samba-folders.list"
sambaSedFolder="/tmp/easy-samba/word/"

# Funcion para comprobar permisos de administrador
function rootMessage() {
  mkdir -p /etc/root &> /dev/null
  administrador=$?
  if [ ${administrador} -eq 0 ] ; then
    rm -rf /etc/root
  else
    echo ""
    echo "* easy-samba ${VERSION} (${M_DATE}) (GPL v2.0)"
    echo ""
    echo "* Administrator permissions are required"
    echo ""
    exit
  fi
}

# Funcion para realizar copia del fichero smb.conf original
function backupSmbConf() {
  if [ -f ${sambaBackup} ] ; then
    echo "OK" > /dev/null
  else
    echo "" >> ${sambaConfig}
    echo "" >> ${sambaConfig}
    cp -rf ${sambaConfig} ${sambaBackup} 2> /dev/null
  fi
}

# Funcion para eliminar espacios y simbolos
# Sintaxis: convertText "<text>"
function convertText() {
  wordToConvert=${1}
  sambaSedFile="${sambaSedFolder}/easy-samba-${RANDOM}.txt"
  mkdir -p ${sambaSedFolder} && chmod 777 -R ${sambaSedFolder} 2> /dev/null
  echo "${wordToConvert}" > ${sambaSedFile}
  # Borrar espacios
  sed -i 's/ /_/g' "${sambaSedFile}" &> /dev/null
  # Borrar simbolos
  symbolsList="[ ] @ { } | \ / ~ # $ % & ? ¿ = ( ) < > ! ¡"
  for findSymbol in ${symbolsList} ; do
    sed -i "s/${findSymbol}//g" "${sambaSedFile}" &> /dev/null
  done
  # Borrar el resto de simbolos
  sed -i 's/*//g' "${sambaSedFile}" &> /dev/null
  sed -i 's/"//g' "${sambaSedFile}" &> /dev/null
  sed -i "s/^//g" "${sambaSedFile}" &> /dev/null
  # Cambiar algunos simbolos
  sed -i 's/+/_/g' "${sambaSedFile}" &> /dev/null
  sed -i 's/:/-/g' "${sambaSedFile}" &> /dev/null
  sed -i 's/;/-/g' "${sambaSedFile}" &> /dev/null
  # Mostrar texto convertido
  wordToConvert=$(cat ${sambaSedFile})
  echo ${wordToConvert}
}

# Funcion para extraer el nombre de la carpeta de una ruta
function extractFolder() {
  pathToExtract="${1}/"
  findFolder=0
  count=1
  nameFolder=$(echo ${pathToExtract} | cut -d "/" -f ${count})
  count=$(expr $count + 1)
  while [ ${findFolder} -eq 0 ] ; do
    nameFolderTemp=$(echo ${pathToExtract} | cut -d "/" -f ${count})
    if [ -z "${nameFolderTemp}" ] ; then
      findFolder=1
    else
      nameFolder="${nameFolderTemp}"
      count=$(expr $count + 1)
    fi
  done
  echo "${nameFolder}"
}

# Funcion para crear enlace en el escritorio/home de los usuarios
# Sintaxis: createFolderLink [carpeta]
function createFolderLink() {
  echo -n "* Do you want to create a link on the desktop/home for local users (y[*]/n): " ; read createLink
  if [ "${createLink}" == "n" ] ; then
    echo "nule" > /dev/null
  else
    if [ "$(ls -A ${homeUsers})" ] ; then
      cd ${homeUsers}
      ls > ${homeUsersList}
      for userDetected in $(cat ${homeUsersList}) ; do
        if [ -d ${homeUsers}/${userDetected}/Desktop ] ; then
          ln -s ${linuxSambaFolder}/${1} ${homeUsers}/${userDetected}/Desktop/ 2> /dev/null
          ln -s ${linuxSambaFolder}/${1} ${homeUsers}/${userDetected}/ 2> /dev/null
          output=$?
        elif [ -d ${homeUsers}/${userDetected}/Escritorio ] ; then
          ln -s ${linuxSambaFolder}/${1} ${homeUsers}/${userDetected}/Escritorio/ 2> /dev/null
          ln -s ${linuxSambaFolder}/${1} ${homeUsers}/${userDetected}/ 2> /dev/null
          output=$?
        elif [ -d ${homeUsers}/${userDetected}/Escriptori ] ; then
          ln -s ${linuxSambaFolder}/${1} ${homeUsers}/${userDetected}/Escriptori/ 2> /dev/null
          ln -s ${linuxSambaFolder}/${1} ${homeUsers}/${userDetected}/ 2> /dev/null
          output=$?
        else
          ln -s ${linuxSambaFolder}/${1} ${homeUsers}/${userDetected}/ 2> /dev/null
          output=$?
        fi
      done
      if [ ${output} -eq 0 ] ; then
        echo "* Links created successfully!"
      else
        echo "* Error: Failed to create links!"
      fi
    else
      echo "* Users not found in ${homeUsers}"
    fi
  fi
}

# Funcion para borrar los enlaces en el escritorio/home de los usuarios
# Sintaxis: deleteFolderLink [carpeta]
function deleteFolderLink() {
  echo -n "* Do you want to delete the links on the desktop/home of local users (y[*]/n): " ; read deleteLink
  if [ "${deleteLink}" == "n" ] ; then
    echo "nule" > /dev/null
  else
    if [ "$(ls -A ${homeUsers})" ] ; then
      cd ${homeUsers}
      ls > ${homeUsersList}
      for userDetected in $(cat ${homeUsersList}) ; do
        if [ -d ${homeUsers}/${userDetected}/Desktop ] ; then
          rm -f ${homeUsers}/${userDetected}/Desktop/${1} 2> /dev/null
          rm -f ${homeUsers}/${userDetected}/${1} 2> /dev/null
          output=$?
        elif [ -d ${homeUsers}/${userDetected}/Escritorio ] ; then
          rm -f ${homeUsers}/${userDetected}/Escritorio/${1} 2> /dev/null
          rm -f ${homeUsers}/${userDetected}/${1} 2> /dev/null
          output=$?
        elif [ -d ${homeUsers}/${userDetected}/Escriptori ] ; then
          rm -f ${homeUsers}/${userDetected}/Escriptori/${1} 2> /dev/null
          rm -f ${homeUsers}/${userDetected}/${1} 2> /dev/null
          output=$?
        else
          rm -f ${homeUsers}/${userDetected}/${1} 2> /dev/null
          output=$?
        fi
      done
      if [ ${output} -eq 0 ] ; then
        echo "* Links deleted successfully!"
      else
        echo "* Error: Failed to delete links!"
      fi
    else
      echo "* Users not found in ${homeUsers}"
    fi
  fi
}

# Funcion para corregir los permisos en la home de un usuario
# Sintaxis: fixHomePermissions <directorio>
function fixHomePermissions() {
  homeFolder="${1}"
  checkHomeFolder=$(echo ${homeFolder} | grep "/home")
  if [ -z ${checkHomeFolder} ] ; then
    echo "null" > /dev/null
  else
    userFolder=$(echo ${homeFolder} | cut -d "/" -f 3)
    chmod o+rx "/home/${userFolder}"
  fi
}

# Funcion para agregar una carpeta a Samba
function addNewFolder() {
  echo ""
  echo -n "* Enter the absolute path of the folder to add: " ; read folder
  pathExtracted=$(extractFolder "${folder}")
  endFolder=$(convertText "${pathExtracted}")
  if [ -z "${folder}" ] ; then
    echo "* You must enter the absolute path of a folder!"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  elif [ -d "${folder}" ] ; then
    if [ -d ${linuxSambaFolder}/${endFolder} ] ; then
      echo "* A folder with the same name is already added or created!"
      echo ""
      echo -n "* Press ENTER to continue... " ; read continue
    else
      fixHomePermissions "${folder}"
      ln -s "${folder}" ${linuxSambaFolder}/${endFolder} 2> /dev/null
      output=$?
      if [ ${output} -ne 0 ] ; then
        echo "* Error: Failed to add folder '${folder}'"
        echo ""
        echo -n "* Press ENTER to continue... " ; read continue
      else
        echo "[${endFolder}]" >> ${sambaConfig}
        echo "# Folder to ${linuxSambaFolder}/${endFolder} # 00bc00" >> ${sambaConfig}
        echo "path = ${linuxSambaFolder}/${endFolder}" >> ${sambaConfig}
        echo "comment = Folder by easy-samba ${VERSION} (${M_DATE})" >> ${sambaConfig}
        echo "browseable = yes" >> ${sambaConfig}
        echo "writeable = yes" >> ${sambaConfig}
        echo "read only = no" >> ${sambaConfig}
        echo "guest ok = yes" >> ${sambaConfig}
        echo "" >> ${sambaConfig}
        echo "* Folder '${folder}' added successfully!"
        createFolderLink ${endFolder}
      fi
    fi
  else
    echo "* The inserted folder does not exist!"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  fi
}

# Funcion para crear carpeta compartida con acceso para todos
function newFolderEveryone() {
  echo ""
  echo -n "* Enter the name of the folder you want to create (without accents): " ; read folder
  formatText=$(convertText "${folder}")
  folder=${formatText}
  if [ -z ${folder} ] ; then
    echo "* You must enter a folder name!"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  elif [ -d ${linuxSambaFolder}/${folder} ] ; then
    echo "* The folder '${folder}' is already created, choose another name"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  else
    mkdir -p ${linuxSambaFolder}/${folder} 2> /dev/null
    output=$?
    if [ ${output} -ne 0 ] ; then
      echo "* Error: Failed to create shared folder '${folder}'"
      echo ""
      echo -n "* Press ENTER to continue... " ; read continue
    else
      chmod 777 -R ${linuxSambaFolder}/${folder}
      echo "[${folder}]" >> ${sambaConfig}
      echo "# Folder to ${linuxSambaFolder}/${folder} # 00bc00" >> ${sambaConfig}
      echo "path = ${linuxSambaFolder}/${folder}" >> ${sambaConfig}
      echo "comment = Folder by easy-samba ${VERSION} (${M_DATE})" >> ${sambaConfig}
      echo "browseable = yes" >> ${sambaConfig}
      echo "writeable = yes" >> ${sambaConfig}
      echo "read only = no" >> ${sambaConfig}
      echo "guest ok = yes" >> ${sambaConfig}
      echo "" >> ${sambaConfig}
      echo "* Shared folder '${folder}' created successfully!"
      createFolderLink ${folder}
    fi
  fi
}

# Funcion para crear carpeta compartida de solo lectura
function newFolderReadOnly() {
  echo ""
  echo -n "* Enter the name of the folder you want to create (without accents): " ; read folder
  formatText=$(convertText "${folder}")
  folder=${formatText}
  if [ -z ${folder} ] ; then
    echo "* You must enter a folder name!"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  elif [ -d ${linuxSambaFolder}/${folder} ] ; then
    echo "* The folder '${folder}' is already created, choose another name"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  else
    mkdir -p ${linuxSambaFolder}/${folder} 2> /dev/null
    output=$?
    if [ ${output} -ne 0 ] ; then
      echo "* Error: Failed to create shared folder '${folder}'"
      echo ""
      echo -n "* Press ENTER to continue... " ; read continue
    else
      chmod 777 -R ${linuxSambaFolder}/${folder}
      echo "[${folder}]" >> ${sambaConfig}
      echo "# Folder to ${linuxSambaFolder}/${folder} # 00bc00" >> ${sambaConfig}
      echo "path = ${linuxSambaFolder}/${folder}" >> ${sambaConfig}
      echo "comment = Folder by easy-samba ${VERSION} (${M_DATE})" >> ${sambaConfig}
      echo "browseable = yes" >> ${sambaConfig}
      echo "writeable = no" >> ${sambaConfig}
      echo "read only = yes" >> ${sambaConfig}
      echo "guest ok = yes" >> ${sambaConfig}
      echo "" >> ${sambaConfig}
      echo "* Shared folder '${folder}' (read only) created succesfully!"
      createFolderLink ${folder}
    fi
  fi
}

# Crear carpeta compartida para un usuario
function newFolderForUser() {
  echo ""
  echo -n "* Enter the name of the folder you want to create (without accents): " ; read folder
  formatText=$(convertText "${folder}")
  folder=${formatText}
  if [ -z ${folder} ] ; then
    echo "* You must enter a folder name!"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  elif [ -d ${linuxSambaFolder}/${folder} ] ; then
    echo "* The folder '${folder}' is already created, choose another name"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  else
    mkdir -p ${linuxSambaFolder}/${folder} 2> /dev/null
    output=$?
    if [ ${output} -ne 0 ] ; then
      echo "* Error: Failed to create shared folder '${folder}'"
      echo ""
      echo -n "* Press ENTER to continue... " ; read continue
    else
      echo -n "* Enter username: " ; read forUser
      randomFolder=/tmp/easy-samba/${RANDOM}-${RANDOM}
      mkdir -p ${randomFolder}
      chown ${forUser} ${randomFolder} 2> /dev/null
      output=$?
      if [ ${output} -ne 0 ] ; then
        rm -rf ${linuxSambaFolder}/${folder}
        echo "* The specified user does not exist!"
        echo ""
        echo -n "* Press ENTER to continue... " ; read continue
      else
        chmod 755 -R ${linuxSambaFolder}/${folder}
        chown ${forUser} -R ${linuxSambaFolder}/${folder}
        echo "[${folder}]" >> ${sambaConfig}
        echo "# Folder to ${linuxSambaFolder}/${folder} # 00bc00" >> ${sambaConfig}
        echo "path = ${linuxSambaFolder}/${folder}" >> ${sambaConfig}
        echo "comment = Folder by easy-samba ${VERSION} (${M_DATE})" >> ${sambaConfig}
        echo "browseable = yes" >> ${sambaConfig}
        echo "writeable = yes" >> ${sambaConfig}
        echo "read only = no" >> ${sambaConfig}
        echo "guest ok = yes" >> ${sambaConfig}
        echo "" >> ${sambaConfig}
        echo "* Shared folder '${folder}' (for ${forUser}) created successfully!"
        createFolderLink ${folder}
      fi
    fi
  fi
}

# Crear carpeta compartida para imprimir
function newFolderPrintable() {
  echo ""
  echo -n "* Enter the name of the folder you want to create (without accents): " ; read folder
  formatText=$(convertText "${folder}")
  folder=${formatText}
  if [ -z ${folder} ] ; then
    echo "* You must enter a folder name!"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  elif [ -d ${linuxSambaFolder}/${folder} ] ; then
    echo "* The folder '${folder}' is already created, choose another name"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  else
    mkdir -p ${linuxSambaFolder}/${folder} 2> /dev/null
    output=$?
    if [ ${output} -ne 0 ] ; then
      echo "* Error: Failed to create shared folder '${folder}'"
      echo ""
      echo -n "* Press ENTER to continue... " ; read continue
    else
      chmod 777 -R ${linuxSambaFolder}/${folder}
      echo "[${folder}]" >> ${sambaConfig}
      echo "# Folder to ${linuxSambaFolder}/${folder} # 00bc00" >> ${sambaConfig}
      echo "path = ${linuxSambaFolder}/${folder}" >> ${sambaConfig}
      echo "comment = Folder by easy-samba ${VERSION} (${M_DATE})" >> ${sambaConfig}
      echo "browseable = yes" >> ${sambaConfig}
      echo "writeable = yes" >> ${sambaConfig}
      echo "printable = yes" >> ${sambaConfig}
      echo "guest ok = yes" >> ${sambaConfig}
      echo "" >> ${sambaConfig}
      echo "* Carpeta compartida '${folder}' (printable) creada con exito!"
      createFolderLink ${folder}
    fi
  fi
}

# Funcion para reiniciar el servicio de Samba
function restartSamba() {
  echo -n "* Do you want to restart the Samba services? (y[*]/n): " ; read sambaSN
  if [ "${sambaSN}" == "n" ] ; then
    echo "nule" > /dev/null
  else
    echo "* Restarting Samba services"
    sleep 3
    /etc/init.d/samba restart &> /dev/null
    systemctl restart smbd.service 2> /dev/null
    systemctl restart nmbd.service 2> /dev/null
    systemctl restart smb.service 2> /dev/null
    echo "* Samba services restarted"
    echo ""
    sleep 3
  fi
}

# Funcion para todas borrar las carpetas compartidas
function restoreSmb() {
  echo ""
  echo "* Note: All shared folders and their content will be deleted!"
  echo "* Important: It will return to the initial state of the file"
  echo "  'smb.conf' before executing 'easy-samba' for the first time."
  echo ""
  echo -n "* Do you want continue (y/n[*]): " ; read deleteFolder
  if [ "${deleteFolder}" == "y" ] ; then
    echo "* Deleting folders..."
    sleep 2
    rm -rf ${linuxSambaFolder}/* 2> /dev/null
    output=$?
    if [ ${output} -eq 0 ] ; then
      echo "* Folders deleted successfully!"
      cp -rf ${sambaBackup} ${sambaConfig} 2> /dev/null
      #rm -rf ${sambaBackup} 2> /dev/null
      restartSamba
    else
      echo "* Failed to delete shared folders!"
      echo ""
      echo -n "* Press ENTER to continue... " ; read continue
    fi
  else
    echo "* The restore process has been aborted"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  fi
}

# Funcion para mostrar carpetas compartidas
function viewFolders() {
  if [ "$(ls -A ${linuxSambaFolder})" ] ; then
    cd ${linuxSambaFolder}
    ls > ${sambaFoldersList}
    echo ""
    echo "* List of available shared folders:"
    echo ""
    folderList=""
    for folderDetected in $(cat ${sambaFoldersList}) ; do
      echo " + ${folderDetected}"
    done
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  else
    echo ""
    echo "* There are currently no shared folders!"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  fi
}

# Funcion para borrar una carpeta compartida
function removeFolder() {
  echo ""
  echo -n "* Enter the name of the folder you want to delete: " ; read folder
  if [ -z ${folder} ] ; then
    echo "* You must enter a folder name!"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  elif [ -d ${linuxSambaFolder}/${folder} ] ; then
    echo "* Deleting folder '${folder}' ..."
    rm -rf ${linuxSambaFolder}/${folder} 2> /dev/null
    output=$?
    if [ ${output} -eq 0 ] ; then
      readLine=$(cat ${sambaConfig} | grep "# Folder to ${linuxSambaFolder}/${folder} # 00bc00" -n | cut -d ":" -f 1)
      if [ -z ${readLine} ] ; then
        echo "* The folder '${folder}' has been deleted but not found in 'smb.conf'"
        echo ""
        echo -n "* Press ENTER to continue... " ; read continue
      else
        initLine=$(expr ${readLine} - 1)
        endLine=$(expr ${readLine} + 7)
        totalLines=$(cat /etc/samba/smb.conf | wc -l)
        count=1
        mkdir -p /tmp/easy-samba/
        echo > /tmp/easy-samba/smb.conf
        while [ ${count} -lt $initLine ] ; do
          cat /etc/samba/smb.conf | head -${count} | tail -1 >> /tmp/easy-samba/smb.conf
          count=$(expr ${count} + 1)
        done
        count=$(expr ${endLine} + 1)
        while [ ${count} -le ${totalLines} ] ; do
          cat ${sambaConfig} | head -${count} | tail -1 >> /tmp/easy-samba/smb.conf
          count=$(expr ${count} + 1)
        done
        cp -rf /tmp/easy-samba/smb.conf ${sambaConfig}
        echo "* The folder '${folder} has been deleted successfully!"
        deleteFolderLink ${folder}
        restartSamba
      fi
    else
      echo "* Error: The folder '${folder}' could not be deleted"
      echo ""
      echo -n "* Press ENTER to continue... " ; read continue
    fi
  else
    echo "* Error: The folder '${folder}' does not exist!"
    echo -n "* Do you want to see a list of the available folders? (y[*]/n): " ; read available
    if [ "${available}" == "n" ] ; then
      echo "nule" > /dev/null
    else
      viewFolders
    fi
  fi
}

# Funcion para mostrar el "acerca" del programa
function mostrarAcerca() {
  echo ""
  echo "* About:"
  echo ""
  echo " - Software: easy-samba ${VERSION} (${M_DATE})"
  echo " - Author: q3aql"
  echo " - Contact: q3aql@protonmail.ch"
  echo " - License: GPL v2.0"
  echo ""
  echo -n "* Press ENTER to continue... " ; read continue
}

# Mostrar menu con todas las opciones
mostrarMenu=0
rootMessage
backupSmbConf
while [ ${mostrarMenu} -eq 0 ] ; do
  clear
  echo ""
  echo "* easy-samba ${VERSION} (${M_DATE})"
  echo ""
  echo " 1  - Add folder to Samba"
  echo " 2  - Create shared folder"
  echo " 3  - Create shared folder (read only)"
  echo " 4  - Create shared folder (for a user)"
  echo " 5  - Create shared folder (printable)"
  echo " 6  - Restart Samba services"
  echo " 7  - View available shared folders"
  echo " 8  - Delete shared folder"
  echo " 9  - Restore smb.conf"
  echo " 10 - About"
  echo ""
  echo " 11 - Exit"
  echo ""
  echo -n " * Elige una opcion: " ; read opcion
  if [ "${opcion}" == "1" ] ; then
    addNewFolder
    restartSamba
  elif [ "${opcion}" == "2" ] ; then
    newFolderEveryone
    restartSamba
  elif [ "${opcion}" == "3" ] ; then
    newFolderReadOnly
    restartSamba
  elif [ "${opcion}" == "4" ] ; then
    newFolderForUser
    restartSamba
  elif [ "${opcion}" == "5" ] ; then
    newFolderPrintable
    restartSamba
  elif [ "${opcion}" == "6" ] ; then
    restartSamba
  elif [ "${opcion}" == "7" ] ; then
    viewFolders
  elif [ "${opcion}" == "8" ] ; then
    removeFolder
  elif [ "${opcion}" == "9" ] ; then
    restoreSmb
  elif [ "${opcion}" == "10" ] ; then
    mostrarAcerca
  elif [ "${opcion}" == "11" ] ; then
    mostrarMenu=1
  elif [ -z "${opcion}" ] ; then
    echo ""
    echo "* You must choose an option "
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  else
    echo ""
    echo "* Invalid option !"
    echo ""
    echo -n "* Press ENTER to continue... " ; read continue
  fi
done
